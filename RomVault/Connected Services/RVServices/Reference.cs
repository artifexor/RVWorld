//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ROMVault.RVServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RVServices.IRVService")]
    public interface IRVService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUp", ReplyAction="http://tempuri.org/IRVService/StartUpResponse")]
        void StartUp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUp", ReplyAction="http://tempuri.org/IRVService/StartUpResponse")]
        System.Threading.Tasks.Task StartUpAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUpV", ReplyAction="http://tempuri.org/IRVService/StartUpVResponse")]
        void StartUpV(int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUpV", ReplyAction="http://tempuri.org/IRVService/StartUpVResponse")]
        System.Threading.Tasks.Task StartUpVAsync(int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUpV2", ReplyAction="http://tempuri.org/IRVService/StartUpV2Response")]
        void StartUpV2(int vMajor, int vMinor, int vBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/StartUpV2", ReplyAction="http://tempuri.org/IRVService/StartUpV2Response")]
        System.Threading.Tasks.Task StartUpV2Async(int vMajor, int vMinor, int vBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendUser", ReplyAction="http://tempuri.org/IRVService/SendUserResponse")]
        string SendUser(string username, string email, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendUser", ReplyAction="http://tempuri.org/IRVService/SendUserResponse")]
        System.Threading.Tasks.Task<string> SendUserAsync(string username, string email, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/CheckFCUser", ReplyAction="http://tempuri.org/IRVService/CheckFCUserResponse")]
        string CheckFCUser(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/CheckFCUser", ReplyAction="http://tempuri.org/IRVService/CheckFCUserResponse")]
        System.Threading.Tasks.Task<string> CheckFCUserAsync(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetFCUsername", ReplyAction="http://tempuri.org/IRVService/GetFCUsernameResponse")]
        byte[] GetFCUsername(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetFCUsername", ReplyAction="http://tempuri.org/IRVService/GetFCUsernameResponse")]
        System.Threading.Tasks.Task<byte[]> GetFCUsernameAsync(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/CheckDVUser", ReplyAction="http://tempuri.org/IRVService/CheckDVUserResponse")]
        string CheckDVUser(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/CheckDVUser", ReplyAction="http://tempuri.org/IRVService/CheckDVUserResponse")]
        System.Threading.Tasks.Task<string> CheckDVUserAsync(string userkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/UpdateCheck", ReplyAction="http://tempuri.org/IRVService/UpdateCheckResponse")]
        bool UpdateCheck(int vMajor, int vMinor, int vBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/UpdateCheck", ReplyAction="http://tempuri.org/IRVService/UpdateCheckResponse")]
        System.Threading.Tasks.Task<bool> UpdateCheckAsync(int vMajor, int vMinor, int vBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetUpdateLink", ReplyAction="http://tempuri.org/IRVService/GetUpdateLinkResponse")]
        string GetUpdateLink();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/GetUpdateLink", ReplyAction="http://tempuri.org/IRVService/GetUpdateLinkResponse")]
        System.Threading.Tasks.Task<string> GetUpdateLinkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessage", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageResponse")]
        void SendErrorMessage(string username, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessage", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageResponse")]
        System.Threading.Tasks.Task SendErrorMessageAsync(string username, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessageV", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageVResponse")]
        void SendErrorMessageV(string username, int version, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessageV", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageVResponse")]
        System.Threading.Tasks.Task SendErrorMessageVAsync(string username, int version, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessageV2", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageV2Response")]
        void SendErrorMessageV2(string username, int vMajor, int vMinor, int vBuild, string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRVService/SendErrorMessageV2", ReplyAction="http://tempuri.org/IRVService/SendErrorMessageV2Response")]
        System.Threading.Tasks.Task SendErrorMessageV2Async(string username, int vMajor, int vMinor, int vBuild, string error);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRVServiceChannel : ROMVault.RVServices.IRVService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RVServiceClient : System.ServiceModel.ClientBase<ROMVault.RVServices.IRVService>, ROMVault.RVServices.IRVService {
        
        public RVServiceClient() {
        }
        
        public RVServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RVServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RVServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RVServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartUp() {
            base.Channel.StartUp();
        }
        
        public System.Threading.Tasks.Task StartUpAsync() {
            return base.Channel.StartUpAsync();
        }
        
        public void StartUpV(int version) {
            base.Channel.StartUpV(version);
        }
        
        public System.Threading.Tasks.Task StartUpVAsync(int version) {
            return base.Channel.StartUpVAsync(version);
        }
        
        public void StartUpV2(int vMajor, int vMinor, int vBuild) {
            base.Channel.StartUpV2(vMajor, vMinor, vBuild);
        }
        
        public System.Threading.Tasks.Task StartUpV2Async(int vMajor, int vMinor, int vBuild) {
            return base.Channel.StartUpV2Async(vMajor, vMinor, vBuild);
        }
        
        public string SendUser(string username, string email, int version) {
            return base.Channel.SendUser(username, email, version);
        }
        
        public System.Threading.Tasks.Task<string> SendUserAsync(string username, string email, int version) {
            return base.Channel.SendUserAsync(username, email, version);
        }
        
        public string CheckFCUser(string userkey) {
            return base.Channel.CheckFCUser(userkey);
        }
        
        public System.Threading.Tasks.Task<string> CheckFCUserAsync(string userkey) {
            return base.Channel.CheckFCUserAsync(userkey);
        }
        
        public byte[] GetFCUsername(string userkey) {
            return base.Channel.GetFCUsername(userkey);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetFCUsernameAsync(string userkey) {
            return base.Channel.GetFCUsernameAsync(userkey);
        }
        
        public string CheckDVUser(string userkey) {
            return base.Channel.CheckDVUser(userkey);
        }
        
        public System.Threading.Tasks.Task<string> CheckDVUserAsync(string userkey) {
            return base.Channel.CheckDVUserAsync(userkey);
        }
        
        public bool UpdateCheck(int vMajor, int vMinor, int vBuild) {
            return base.Channel.UpdateCheck(vMajor, vMinor, vBuild);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCheckAsync(int vMajor, int vMinor, int vBuild) {
            return base.Channel.UpdateCheckAsync(vMajor, vMinor, vBuild);
        }
        
        public string GetUpdateLink() {
            return base.Channel.GetUpdateLink();
        }
        
        public System.Threading.Tasks.Task<string> GetUpdateLinkAsync() {
            return base.Channel.GetUpdateLinkAsync();
        }
        
        public void SendErrorMessage(string username, string error) {
            base.Channel.SendErrorMessage(username, error);
        }
        
        public System.Threading.Tasks.Task SendErrorMessageAsync(string username, string error) {
            return base.Channel.SendErrorMessageAsync(username, error);
        }
        
        public void SendErrorMessageV(string username, int version, string error) {
            base.Channel.SendErrorMessageV(username, version, error);
        }
        
        public System.Threading.Tasks.Task SendErrorMessageVAsync(string username, int version, string error) {
            return base.Channel.SendErrorMessageVAsync(username, version, error);
        }
        
        public void SendErrorMessageV2(string username, int vMajor, int vMinor, int vBuild, string error) {
            base.Channel.SendErrorMessageV2(username, vMajor, vMinor, vBuild, error);
        }
        
        public System.Threading.Tasks.Task SendErrorMessageV2Async(string username, int vMajor, int vMinor, int vBuild, string error) {
            return base.Channel.SendErrorMessageV2Async(username, vMajor, vMinor, vBuild, error);
        }
    }
}
